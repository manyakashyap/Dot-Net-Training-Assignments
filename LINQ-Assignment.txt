LINQ Assignment- 1

1....   Structures:

using System
class namespace
{
    struct Books
    {
         private string Title;
         private string Author;
         private string Subject;
         private int Book_id;


         public Get_Values(string title, string author, string subject, int book_id)
         {
            Title = title;
            Author = author;
            Subject = subject;
            Book_id = book_id;

         }

         public Show_Values()
         {

            Console.WriteLine("Display the details of the book:");
            Console.WriteLine("Title of the Book: {0}", Title);
            Console.WriteLine("Author of the Book: {0}", Author);
            Console.WriteLine("Subject: {0}", Subject);
            Console.WriteLine("Book Id:  {0}", Book_id);

         }
    }

    class TestStructures
    {
        static void Main()
        {

            Books b = new Books();
            Console.Write("Enter the title of the book:");
            b.title = Console.ReadLine();
            Console.Write("Enter the author of the book:");
            b.author = Console.ReadLine();
            Console.Write("Enter the subject of the book:");
            b.sub = Console.ReadLine();
            Console.Write("Enter the Book Id:");
            b.Id = Convert.ToInt32(Console.ReadLine());

            b.Get_Values();
            b.Show_Values();
            Console.Read();
        }
          
    }
}


Collections::

2.....


using System
using System.Collections.Generic;
using System.Linq;
namespace Collections 
{
    class Products
    {
        public int  Product_Id;
        public string Product_Name;
        public float Product_Price;

        static void Main()
        {
            List<Product>productlist = new List<Product>();
            Console.WriteLine("Enter details of 10 Products:");
            for(int i=0;i<=10;i++)
            {
                Console.WriteLine($"Enter details of product :{i}");
                Console.Write("Enter Product Id:");
                int Id = Convert.ToInt32(Console.ReadLine());
                Console.WriteLine("Enter Name of the Product:");
                string Name = Console.ReadLine();
                Console.Write("Enter Price of the product:");
                float price = float.Parse(Console.ReadLine());

                productlist.Add(new Product { Product_Id =Id, Product_Name = Name, Product_Price = price});
            }

            Console.WriteLine("Displaying after sorting by Price in Ascending order:");
            var prod_details = productlist.OrderBy(p => p.Product_Price);
            foreach(var v in prod_details)
            {
                Console.WriteLine($"Product Id:{v.Product_Id},  Product Name: {v.Product_Name},  Product Price: {v.Product_Price}");
                
            }
            Console.ReadLine();
        }
    }
}




3...

using System;
using System.Collections.Generic;
using System.Linq;

namespace stationery
{
    class test
    {
        static void Main()
        {
            stationery S = new stationery();
            S.GetItem();
            S.DisplayItem();
            console.Read();

        }
    }
    class stationery
    {
        int Id;
        string Name;
        float Price;

        List<stationery> stationeries = new List<stationery>();
        public GetItem()
        {
            Console.WriteLine("Enter Stationery Item Details:");
            Console.Write("Enter Item Id:");
            int id = Convert.ToInt32(Console.ReadLine());
            Console.Write("Enter Item Name:");
            string name = Console.ReadLine();
            console.Write("Enter Item Price:");
            float price = float.Parse(Console.ReadLine()); 
            stationeries.Add(new stationery{Id=id, Name = name, Price = price });
            
        }

        public void DisplayItem()
        {
            Console.WriteLine("Details of Item:");
            foreach(stationery S in stationeries)
            {
                Console.WriteLine($"Item Id:{S.Id}, Item Name: {S.Name}, Item Price: {S.Price}");

            }

        }       
    }
}



LINQ:


namespace Linq
{
    class Employee
    {
        int EmployeeId;
        string FirstName;
        string LastName;
        string Title;
        date DOB;
        date DOJ;
        string city;

        static void Main()
        {
            List<Employee> EmployeeList = new List<Employee>()
            {
                new Employee(){ EmployeeId = 1001, FirstName= "Malcolm", LastName= "Daruwalla", Title="Manager", DOB=DateTime.Parse("16/11/1984"), DOJ=DateTime.Parse("8/6/2011"),  City= Mumbai},
                new Employee(){ EmployeeId = 1002, FirstName= "Asdin", LastName= "Dhalla", Title="AsstManager", DOB=DateTime.Parse("20/08/1984"), DOJ=DateTime.Parse("7/7/2012"), City= Mumbai},
                new Employee(){ EmployeeId = 1003, FirstName= "Madhvi", LastName= "Oza", Title="Consultant", DOB=DateTime.Parse("14/11/1987"), DOJ=DateTime.Parse("12/4/2015"), City= Pune},
                new Employee(){ EmployeeId = 1004, FirstName= "Saba", LastName= "Shaikh", Title="SE", DOB=DateTime.Parse("3/6/1990"), DOJ=DateTime.Parse("2/2/2016"), City= Pune},
                new Employee(){ EmployeeId = 1005, FirstName= "Nazia", LastName= "Shaikh", Title="SE", DOB=DateTime.Parse("8/3/1991"), DOJ=DateTime.Parse("2/2/2016"), City= Mumbai},
                new Employee(){ EmployeeId = 1006, FirstName= "Amit", LastName= "Pathak", Title="Consultant", DOB=DateTime.Parse("7/11/1989"), DOJ=DateTime.Parse("8/8/2014"), City= Chennai},
                new Employee(){ EmployeeId = 1007, FirstName= "Vijay", LastName= "Natrajan", Title="Consultant", DOB=DateTime.Parse("2/12/1989"), DOJ=DateTime.Parse("1/6/2015"),  City= Mumbai},
                new Employee(){ EmployeeId = 1008, FirstName= "Rahul", LastName= "Dubey", Title="Associate", DOB=DateTime.Parse("11/11/1993"), DOJ=DateTime.Parse("6/11/2014"), City= Chennai},
                new Employee(){ EmployeeId = 1009, FirstName= "Suresh", LastName= "Mistry", Title="Associate", DOB=DateTime.Parse("12/8/1992"), DOJ=DateTime.Parse("3/12/2014"), City= Chennai},
                new Employee(){ EmployeeId = 1010, FirstName= "Sumit", LastName= "Shah", Title="Manager", DOB=DateTime.Parse("12/4/1991"), DOJ=DateTime.Parse("2/1/2016"),  City= Pune},

            }


            //a.
            var myemp = from e in EmployeeList Select e;

            foreach(Employee E in myemp)
            {
                Console.WriteLine($"Employee Id: {E.EmployeeId}, Employee First Name:{E.FirstName}, Employee Last Name:{E.LastName}, Title: {E.Title}, DOB :{E.DOB.ToString()}, DOJ :{E.DOJ.Tostring()}, Employee City:{E.City}");  
            }


            //b.
            Console.WriteLine("Display details of employee whose city is not mumbai:");
            var not_mumbai = from e in EmployeeList
                                  where e.City != "Mumbai"
                                  Select e;
            
            foreach(Employee E not_mumbai)
            {
                 Console.WriteLine($"Employee Id: {E.EmployeeId}, Employee First Name:{E.FirstName}, Employee Last Name:{E.LastName}, Title: {E.Title}, 
                DOB :{E.DOB.ToString("dd-mm-yyyy")},DOJ :{E.DOJ.Tostring("dd-mm-yyyy")}, Employee City:{E.City}");  ")
            }



            //c.
            Console.WriteLine("Details of all the employee whose title is AsstManager:");
            var myEmp = from t in EmployeeList 
                             where t.Title == "AsstManager";
                             Select t;

            foreach(Employee E in myEmp)
            {
                Console.WriteLine($"Employee Id: {E.EmployeeId}, Employee First Name:{E.FirstName}, Employee Last Name:{E.LastName}, Title: {E.Title}, 
                DOB :{E.DOB.ToString()},DOJ :{E.DOJ.Tostring()}, Employee City:{E.City}");  ")

            }


            //d.
            Console.WriteLine("Details of all the employee whose lastname starts with S:");
            myEmp = from e in EmployeeList
                         where e.LastName.StartsWith("S")
                         Select e;
            
            foreach(Employee E in myEmp)
            {
                Console.WriteLine($"Employee Id: {E.EmployeeId}, Employee First Name:{E.FirstName}, Employee Last Name:{E.LastName}, Title: {E.Title}, 
                DOB :{E.DOB.ToString()},DOJ :{E.DOJ.Tostring()}, Employee City:{E.City}");
            }

            //e.
            Console.WriteLine("Details of employee who joined before 1/1/2015");
            var myEmp = from e in EmployeeList
                             where e.DOJ<("1/1/2015");
                             Select e;
            
            foreach(Employee E in myEmp)
            {
                Console.WriteLine($"Employee Id: {E.EmployeeId}, Employee First Name:{E.FirstName}, Employee Last Name:{E.LastName}, Title: {E.Title}, 
                DOB :{E.DOB.ToString("dd-mm-yyyy")},DOJ :{E.DOJ.Tostring("dd-mm-yyy")}, Employee City:{E.City}");  
            }


            //f.
            Console.WriteLine("Dispaly details of employee whose date of birth is after 1/1/1990:");
            var myEmp = from e in EmployeeList
                             e.DOB>DateTime.Parse("1/1/1990")
                             Select e;
            
            foreach(Employee E in myEmp)
            {
                Console.WriteLine($"Employee Id: {E.EmployeeId}, Employee First Name:{E.FirstName}, Employee Last Name:{E.LastName}, Title: {E.Title}, 
                DOB :{E.DOB.ToString("dd-mm-yyyy")},DOJ :{E.DOJ.Tostring("dd-mm-yyy")}, Employee City:{E.City}");  
            }


            //g.
            Console.WriteLine("Details of all the employee whose designation is Consultant and Associate:");
            var myEmp = from e in EmployeeList
                             where e.Title == "Consultant" || e.Title == "Associate"
                             Select e;

            foreach(Employee E in myEmp)
            {
                Console.WriteLine($"Employee Id: {E.EmployeeId}, Employee First Name:{E.FirstName}, Employee Last Name:{E.LastName}, Title: {E.Title}, 
                DOB :{E.DOB.ToString("dd-mm-yyyy")},DOJ :{E.DOJ.Tostring("dd-mm-yyy")}, Employee City:{E.City}");  
            }


            //h.
            Console.WriteLine("Display total number of Employeea:");
            var tot = from e in EmployeeList
                           Select e;
            
            Console.WriteLine($"Total Number of Employee:{tot.count()}");

            //i.
            Console.WriteLine("Display total no of employee belonging to Chennai:");
            var tot_chennai = from e in EmployeeList
                                   where e.City == "Chennai"
                                   Select e;

            console.WriteLine($"Total Number of Employee Belonging to Chennai:{tot_chennai.count()}");

            //j.
            Console.WriteLine("Display highest Employee Id:");
            var high_Id = EmployeeList.Max(E => E.EmployeeId);
            Console.WriteLine(high_Id);


            //k.
            Console.WriteLine("Display total no of employee who have joined after 1/1/2015: ");
            var v = from e in EmployeeList
                         where e.DOJ>DateTime.Parse("1/1/2015")
                         Select e;
            
            Console.WriteLine("Total Number of Employee joined after 1/1/2015:"+ v.count());

            //L.
            Console.WriteLine("Total Number of employee whose designation is not associate:");
            var not_associate = from e in EmployeeList
                                     where e.Title != "Associate"
                                     Select e;

            Console.WriteLine("Total number of employee whose title is not associate:", not_associate.count());

    
        }
    }
}


